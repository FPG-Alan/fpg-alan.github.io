[
{
	"uri": "http://localhost/develop/realms/",
	"title": "Realms",
	"tags": [],
	"description": "",
	"content": "Each Organization has it\u0026rsquo;s own Realm. Manipulation of Blueprints, Campaigns, Batches, or Creatives usually requires providing a \u0026lsquo;realm_id\u0026rsquo; field. A User can belong to multiple Realms. For each Realm to which a User belongs, it can manipulate all entities belong to that Realm.\nWhere to find realm IDs Users can see the Realms they belong to from their Profile Page on the Savvy Platform.\n"
},
{
	"uri": "http://localhost/system/all-users/",
	"title": "All Users",
	"tags": [],
	"description": "",
	"content": "A User is an individual account created by or invited to the Savvy Platform by the Admin. Each User belongs to one or more Organizations and has a specific Role within each Organization to which it belongs.\nFrom the All Users screen, individual Users may be edited or deleted.\n"
},
{
	"uri": "http://localhost/studio/batch/",
	"title": "Batches",
	"tags": [],
	"description": "",
	"content": "A Batch is a feed which identifies the different dynamic elements of a Multiplier Blueprint and specifies element values per Creative. This feed allows the User to update content and generate new Creatives without having to update the Creative asset directly. Batches also provide a standard format for describing each Creative. In this format, each aspect of a Creative is called a Creative Attribute. For example, the name of the Creative can be referred to as the Creative Title Attribute, the font of the Creative is the Creative Font Attribute, etc.\nSupported feed formats  Google spreadsheet (recommended)  \nTo create a new Batch:  Navigate to ‘Studio -\u0026gt; Batches‘ from the left side menu. Click Create. Fill in the required information and click Next. (Note: \u0026lsquo;####\u0026rsquo; in Creative Name Rule represents the numbering format in the naming convention. Using this setting, if you have 240 videos, the auto-generated video name for the 122nd video would be ‘0122‘).\n Upload your feed and assets (a single zip containing all the assets is supported). If any problems occur during this process, click ‘Help me done‘ button to open a ticket and send us your request (What\u0026rsquo;s ticket?) Click Valid \u0026amp; Generate. Click Build. Click back to return to the list and see your newly created Batch. "
},
{
	"uri": "http://localhost/studio/blueprint/",
	"title": "Blueprints",
	"tags": [],
	"description": "",
	"content": "A Blueprint consists of a Nuke file and a JSON file. The Nuke file contains the animation blueprint. The JSON file lists all configurable fields in the blueprint (product images, text, etc).\nTo add a new Blueprint:  Navigate to \u0026lsquo;Studio -\u0026gt; Blueprints\u0026rsquo; in the left side menu. Click Create. Fill in the required information and click Next. Upload your Blueprint. It should include one Nuke (.nk) file and one JSON (.json) file If any problems occur, click \u0026lsquo;Help me done\u0026rsquo; to open a ticket and send us your request(Learn about Tickets here) Click Valid \u0026amp; Next. A success indicator will appear if there\u0026rsquo;s no issue. Click Back to return to blueprint list. Locate the Blueprint in the list, and select Generate link in Operations column initiate creation of a new Creative. "
},
{
	"uri": "http://localhost/studio/campaign/",
	"title": "Campaign Setup",
	"tags": [],
	"description": "",
	"content": "A Campaign is a single project belonging to one Organization.\nTo add a new Campaign:  Navigate to ‘Studio -\u0026gt; Campaigns‘ from the left side menu. Click Create. Fill in the required information and click Submit.  \nTo edit a Campaign:  Locate a Campaign in the list or by using the Search function. Click the Edit link in the Operations column. Change as needed and click Submit.  \nTo delete a Campaign:  Locate a Campaign in the list or by using the Search function. Click the Delete link in the Operations column. In the pop up window, click OK to confirm deletion.  \nTo delete multiple Campaigns:  Select checkboxes for individual Campaigns in the list or check all from the box at the top left. From the Bulk Actions dropdown, select Delete. Click Apply. "
},
{
	"uri": "http://localhost/studio/creative/",
	"title": "Creatives",
	"tags": [],
	"description": "",
	"content": "A Creative is a single video unit built on the Savvy Platform.\n\nBuild state:    Status Description     New Creative is ready to be rendered   Error An error has occurred during the rendering process preventing the user from previewing Creative   Built Creative has been rendered and is available for preview    \nTo edit a Creative:  Click the Edit link in the operations column. Edit the Creative name or choose a new Campaign. Click Next. Swap assets or text configured in the Blueprint. Click Generate and Build. Click Back to return to the list Check the Creative\u0026rsquo;s build progress. Once complete, a \u0026lsquo;View\u0026rsquo; link will appear in the Operations column. "
},
{
	"uri": "http://localhost/studio/font/",
	"title": "Fonts",
	"tags": [],
	"description": "",
	"content": "Fonts are used to style rendered text.\nSupported font file formats:  OTF  TTF  \nUsing custom fonts in one Creative: You can upload your custom fonts into the Font Library and configure one or more fonts for one Creative.\n\nUsing custom fonts in the dynamic Creatives: To use one or more custom fonts for each Creative of a single Blueprint, first upload the fonts into the Font Library, then populate the relevant font information in the Batch feed. The example below shows how this can be achieved with \u0026lsquo;font-family\u0026rsquo; and \u0026lsquo;font.style\u0026rsquo; columns.\n\nView your custom font:  Locate the font in the font list or by using the search function. Click the View link in the Operations column. "
},
{
	"uri": "http://localhost/system/organizations/",
	"title": "Organizations",
	"tags": [],
	"description": "",
	"content": "From the Organizations screen, the Admin can configure individual Organizations (create teams, set roles, add more users, etc.)\nSystem Roles An Organization can only be created by the platform Super Admin. Please contact your Savvy Account Manager or Sales Team Representative for more information.\n\nTo create a new Organization:  From the System menu on the left panel, select Organizations. Click Create. Fill in the required information and click Submit. "
},
{
	"uri": "http://localhost/system/system-roles/",
	"title": "System Roles",
	"tags": [],
	"description": "",
	"content": "A Role defines a set of tasks a User assigned to the role is allowed to perform on the Savvy Platform.\nIn the Permissions column of the table, \u0026ldquo;Read\u0026rdquo; means the user can only view. \u0026ldquo;Write\u0026rdquo; means the user can add, edit and delete.\nThis chart specifies permissions for all user roles.\n   Permission Organization Administrator Account Manager Project Manager Production Team QA Platform Members     Create Organization √ √       Create User √ √ √      Create Team √ √       Set Roles √ √ √      Publish Creative √        Approve creative √ √       Ticket read √ √ √ √ √ √   Ticket write √ √ √ √ √    Campaign read √ √ √ √ √ √   Campaign write √ √ √ √ √    Creative read √ √  √ √ √   Creative write √ √ √ √ √    Blueprint read √ √ √ √ √ √   Blueprint write √ √ √ √ √    Font read √ √ √ √ √ √   Font write √ √ √ √ √    Batch read √ √ √ √ √ √   Batch write √ √ √ √ √     \nTo create a new Role:  Select System Roles from the side menu. Click Create. Fill out the Role name (for example: \u0026lsquo;QA\u0026rsquo;) and summary fields. Select the corresponding permissions.  \nTo set a Role for User(s):  Click the name of the Role. Input one or more Users and click Add. "
},
{
	"uri": "http://localhost/develop/access-tokens/",
	"title": "Access Tokens",
	"tags": [],
	"description": "",
	"content": "An Access Token is used to access the Savvy Developer API.\nCreate a new Access Token On the Savvy Platform, select Access Tokens from the User Profile dropdown in the upper right. You can create new Access Tokens from this page.\nFor security reasons, after you navigate off this page, no one will be able to see the Token again. \nAfter an Access Token has been created, you can use it to access the Developer API. For example: curl \\ -H \u0026#34;authorization:Bearer \u0026lt;token\u0026gt;\u0026#34; \\ \u0026#34;https://www.savvyplatform.com/api-v1/creatives\u0026#34;\n"
},
{
	"uri": "http://localhost/develop/blueprint/",
	"title": "Blueprints",
	"tags": [],
	"description": "",
	"content": "Introducing APIs for Blueprints.\nsequenceDiagram participant ClientApp as Client App participant SavvyAPI as Savvy API participant SavvyTeam as Savvy Team ClientApp-SavvyAPI: POST /blueprint SavvyAPI--ClientApp: Return Result ClientApp-SavvyAPI: POST /blueprints/#lt;id#gt;/assets?versioned=true SavvyAPI--ClientApp: Return Result Note over ClientApp,SavvyTeam: If an error occurs ClientApp-SavvyTeam: POST /supporting_tickets/ SavvyTeam--ClientApp: Return Result loop Reply ticket ClientApp-SavvyTeam: POST /supporting_posts SavvyTeam--ClientApp: Return Result end  List Blueprints curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -G \u0026#34;https://www.savvyplatform.com/api-v1/blueprints?limit=1\u0026amp;offset=2\u0026#34; List URL Query Params    Name Required Description     limit No Limit the returned records max count   offset No Skip a number of records from the returned result   sort No Sort the return result by a specific field. For example, \u0026ldquo;-id\u0026rdquo; means sort by \u0026ldquo;id\u0026rdquo; field with results in descending order and \u0026ldquo;id\u0026rdquo; would return the results in ascending order   search No A string value for search record\u0026rsquo;s name field   filter No A JSON object for complex filtering of returned records    Return data structure { records: [], offset: 10, total: 100 }     Field Type Description     records Array Returned records   offset int Skipped records count   total int Total records count    Blueprint record structure    Field Type Description     id int The blueprint\u0026rsquo;s id   name string The blueprint\u0026rsquo;s name   version int The blueprint\u0026rsquo;s version   package object Data in the blueprint.json file   summary string Summary for blueprint   realm_id int Realm id   organization_id int Organization id   owner_id int Owner id   created_at time The blueprint\u0026rsquo;s created date   updated_at time The blueprint\u0026rsquo;s last updated date    Create a new blueprint curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test_blueprint\\\u0026#34;,\\\u0026#34;realm_id\\\u0026#34;:0,\\\u0026#34;summary\\\u0026#34;:\\\u0026#34;a test blueprint\\\u0026#34;}\u0026#34; \u0026#34;https://www.savvyplatform.com/api-v1/blueprints\u0026#34; Posted new data structure    Field Type Required Description     name string Yes The blueprint\u0026rsquo;s name   realm_id int Yes The realm this blueprint will belong to   summary string No Summary for blueprint    Update an existing blueprint curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test_blueprint\\\u0026#34;,\\\u0026#34;realm_id\\\u0026#34;:0,\\\u0026#34;summary\\\u0026#34;:\\\u0026#34;a test blueprint\\\u0026#34;}\u0026#34; -X PATCH \u0026#34;https://www.savvyplatform.com/api-v1/blueprints\u0026#34; Update data structure    Field Type Required Description     name string Yes The blueprint\u0026rsquo;s name   realm_id int Yes The realm this blueprint will belong to   summary string No Summary for blueprint    Delete an existing blueprint curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -X DELETE \u0026#34;https://www.savvyplatform.com/api-v1/blueprints/1\u0026#34; Once it\u0026rsquo;s used to generate a creative, a blueprint cannot be deleted. \n"
},
{
	"uri": "http://localhost/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "",
	"content": " Campaign A Campaign is a single project belonging to one Organization.\n\nCreative A Creative is a single video product built on the Savvy Platform.\n\nBatch A Batch is a feed which identifies the different dynamic elements of a Multiplier Blueprint and specifies element values per Creative. This feed allows the User to update content and generate new Creatives without having to update the Creative asset directly. Batches also provide a standard format for describing each Creative. In this format, each aspect of a Creative is called a Creative Attribute. For example, the name of the Creative can be referred to as the Creative Title Attribute, the font of the Creative is the Creative Font Attribute, etc.\n\nBlueprint A Blueprint consists of a Nuke file and a JSON file. The Nuke file contains the animation. The JSON file lists all configurable fields in the blueprint (product images, text, etc).\n\nSupport Ticket A Support Ticket is an individual message in the Platform\u0026rsquo;s ticketing system. They can be used to request a new project or ask for help.\n\nUser A User is an individual account created by or invited to the Savvy Platform by the Admin. Each User belongs to one or more Organizations and has a specific Role within each Organization to which it belongs.\n\nOrganization Each Organization on the Savvy Platform consists of Users and Teams. From the Organization screen on the Savvy Platform, the Admin can set all configurations for that Organization such as managing Teams or editing User Roles.\n\nRole A Role defines a set of tasks a User assigned to the role is allowed to perform on the Savvy Platform.\n\nTeam A Team consists of Members and Resources. Members can be Users or Organizations. Resources can be Campaigns and Blueprints. Each Team grants different access rights to its individual Members.\nAs an example, Christina is a User with a Role of \u0026lsquo;QA\u0026rsquo; which does not grant her permission to publish a project, but her User can be added to a Team which has and therefore grants her rights to publish that project.\nA comparison chart:    Aspect Team Role     Flexibility Can be adjusted easily and frequently Rarely change   Control of external members Yes, even external organizations No   Configuration Flexible, rules can be set per Resource A general type (Nick: PM; Christina: QA)   Lifetime Flexible, based on need. E.g, a Team can be spun up for a 2-day or 2-month project Roles are rarely added or deleted    \n"
},
{
	"uri": "http://localhost/glossary/",
	"title": "Glossary",
	"tags": [],
	"description": "",
	"content": " Batch A Batch is a set of videos inside of a campaign. For Multiplier, a batch contains videos produced from a single blueprint in combination with a data source such as a feed.\n\nBlueprint Blueprints are the foundation for Multiplier and can be used to generate one or several creatives on demand.\n\nCampaign A campaign is a single project in your organization. Campaigns contain creatives.\n\nConverter Savvy™ Converter can transform a single, layered artwork file into attention-grabbing motion video within 24 hours, utilizing our proprietary technology and process.\n\nCreative A creative is a single video product built on the Savvy™ Platform. Creatives are not video files but proprietary video technology from which videos, or outputs can be exported.\n\nDeployment A deployment is the means by which Savvy videos can be transferred to authorized third-party accounts. Facebook, Box and Dropbox are currently supported.\n\nGenerator Savvy™ Generator leverages any combination of existing assets to create multiple variations and sizes of short-form video.\n\nMultiplier Savvy™ Multiplier dynamically renders video to automate up to thousands of content options for maximum content variety and scalability.\n\nOrganization An organization a business account.\n\nOutput An output is a single video export of a creative. Each output has it’s own dimensions and bitrate, and may have other unique settings depending on the type of Savvy™ product from which it originated. "
},
{
	"uri": "http://localhost/develop/campaigns/",
	"title": "Campaigns",
	"tags": [],
	"description": "",
	"content": "Introducing APIs for Campaigns.\nList Campaigns curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -G \u0026#34;https://www.savvyplatform.com/api-v1/campaigns?limit=1\u0026amp;offset=2\u0026#34; List URL Query Params    Name Required Description     limit No Limit the returned records max count   offset No Skip a number of records from the returned result   sort No Sort the return result by a specific field. For example, \u0026ldquo;-id\u0026rdquo; means sort by \u0026ldquo;id\u0026rdquo; field with results in descending order and \u0026ldquo;id\u0026rdquo; would return the results in ascending order   search No A string value for search record\u0026rsquo;s name field   filter No A JSON object for complex filtering of returned records    Return data structure { records: [], offset: 10, total: 100 }     Field Type Description     records Array Returned records   offset int Skipped records count   total int Total records count    Campaign record structure    Field Type Description     id int The campaign\u0026rsquo;s id   name string The campaign\u0026rsquo;s name   realm_id int Realm id   organization_id int Organization id   summary string Summary   owner_id int Owner id   created_at time The campaign\u0026rsquo;s created date   updated_at time The campaign\u0026rsquo;s last updated date    Create a new Campaign curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test_campaign\\\u0026#34;,\\\u0026#34;realm_id\\\u0026#34;:0,\\\u0026#34;summary\\\u0026#34;:\\\u0026#34;a test campaign\\\u0026#34;}\u0026#34; \u0026#34;https://www.savvyplatform.com/api-v1/campaigns\u0026#34; Posted new data structure    Field Type Required Description     name string Yes The campaign\u0026rsquo;s name   realm_id int Yes The Realm this campaign will belong to   summary string No Summary for campaign    Update an existing Campaign curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test_campaign\\\u0026#34;,\\\u0026#34;realm_id\\\u0026#34;:0,\\\u0026#34;summary\\\u0026#34;:\\\u0026#34;a test campaign\\\u0026#34;}\u0026#34; -X PATCH \u0026#34;https://www.savvyplatform.com/api-v1/campaigns\u0026#34; Update data structure    Field Type Required Description     name string Yes The campaign\u0026rsquo;s name   realm_id int Yes The Realm this campaign will belong to   summary string No Summary for campaign    Delete an existing Campaign curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -X DELETE \u0026#34;https://www.savvyplatform.com/api-v1/campaigns/1\u0026#34; Campaigns containing rendered Creatives cannot be deleted. \n"
},
{
	"uri": "http://localhost/savvy-cli/",
	"title": "Savvy-cli",
	"tags": [],
	"description": "",
	"content": " Savvy-cli is a command line tool for the Savvy Platform. It can used to bundle Savvy Blueprints.\nInstall Savvy-cli  Ensure node.js is already installed on your local machine. If not, download and install here.\n Download the Savvy-cli install package, unzip it，navigate to the savvy-cli directory, and run the following commands： npm install npm link \n Enter savvy from a terminal window to ensure savvy is properly installed.\n  Savvy-cli Commands  user login:\nsavvy login  Init a blueprint：\nsavvy blueprint init  Generate blueprint samples and screenshots：\nsavvy blueprint sample  Bundle blueprint：\nsavvy blueprint bundle  List all fonts in current blueprint：\nsavvy blueprint fonts  create a new blueprint to savvy site：\n demand options:realm_id,name(name of tamplate) demand file：file（bundle.zip）\nsavvy blueprint create //example savvy blueprint create --realm_id 8 --name test --file bundle.zip   update blueprint\u0026rsquo;s bundle file：\n demand options: blueprint_id demand file：file（bundle.zip）\nsavvy blueprint upload //ex. savvy blueprint upload --blueprint_id 133 --file bundle.zip   creat a new batch to savvy site：\n demand options: org_id(organization_id),realm_id,cmp_id(compaign_id),blueprint_id,name(batch\u0026rsquo;s name) demand file：feed（json format） ,asset（zip format）\nsavvy batch create //ex. savvy batch create --org_id 5 --realm_id 8 --cmp_id 19 --blueprint_id 128 --name cli_create_test --feed feed-BeatlesV2-800x800.json --asset 800x800.zip   update batch and rebuild creatives：\n demand options: batch_id,realm_id demand file：feed（json format） ,asset（zip format）, these are not required\nsavvy batch regenerate //ex. savvy batch regenerate --batch_id 204 --asset 800x800.zip --feed feed-BeatlesV2-800x800.json   download online vidoes and remove their names\u0026rsquo; prefix ids：\n demand options: batch_id，search，output(where the videos are) there are two ways to download，by batch_id or search keyword\nsavvy download //ex. savvy download --batch_id 113 --output download    "
},
{
	"uri": "http://localhost/develop/batches/",
	"title": "Batches",
	"tags": [],
	"description": "",
	"content": "Introducing APIs for Batches.\nList Batches curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -G \u0026#34;https://www.savvyplatform.com/api-v1/batches?limit=1\u0026amp;offset=2\u0026#34; List URL Query Params    Name Required Description     limit No Limit the returned records max count   offset No Skip a number of records from the returned result   sort No Sort the return result by a specific field. For example, \u0026ldquo;-id\u0026rdquo; means sort by \u0026ldquo;id\u0026rdquo; field with results in descending order and \u0026ldquo;id\u0026rdquo; would return the results in ascending order   search No A string value for search record\u0026rsquo;s name field   filter No A JSON object for complex filtering of returned records    Return data structure { records: [], offset: 10, total: 100 }     Field Type Description     records Array Returned records   offset int Skipped records count   total int Total records count    Batch record structure    Field Type Description     id int The batch\u0026rsquo;s id   name string The campaign\u0026rsquo;s name   realm_id int Realm id   organization_id int Organization id   campaign_id int Campaign id   blueprint_id int Blueprint id   creative_name_rule string Creative name rule. For example: \u0026ldquo;name ####\u0026rdquo; will generate name as \u0026ldquo;name 0001, name 0002\u0026hellip;\u0026rdquo;; ${name} will use column \u0026ldquo;name\u0026rdquo; in feed as creative name   feed object Feed information. For example: {file:\u0026ldquo;\u0026rdquo;, type:\u0026ldquo;xlsx\u0026rdquo;}   assets Array Assets used to build creatives   notify_emails Array\u0026lt;string\u0026gt; A list of emails to receive for update notifications   summary string Summary   owner_id int Owner id   created_at time The batch\u0026rsquo;s created date   updated_at time The batch\u0026rsquo;s last updated date    Create new Batch curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test_batch\\\u0026#34;,\\\u0026#34;realm_id\\\u0026#34;:0,\\\u0026#34;summary\\\u0026#34;:\\\u0026#34;a test batch\\\u0026#34;}\u0026#34; \u0026#34;https://www.savvyplatform.com/api-v1/batches\u0026#34; Posted new data structure    Field Type Required Description     name string Yes The batch\u0026rsquo;s name   realm_id int Yes The realm this batch belongs to   summary string No Summary for batch    Update an existing Batch curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test_batch\\\u0026#34;,\\\u0026#34;realm_id\\\u0026#34;:0,\\\u0026#34;summary\\\u0026#34;:\\\u0026#34;a test batch\\\u0026#34;}\u0026#34; -X PATCH \u0026#34;https://www.savvyplatform.com/api-v1/batches\u0026#34; Update data structure    Field Type Required Description     name string Yes The batch\u0026rsquo;s name   realm_id int Yes The realm this batch belongs to   summary string No Summary for batch    Delete an existing Batch curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -X DELETE \u0026#34;https://www.savvyplatform.com/api-v1/batches/1\u0026#34; Once Creatives have been generated using a Batch, it cannot be deleted. \n"
},
{
	"uri": "http://localhost/quick-start-guide/",
	"title": "Quick Start Guide",
	"tags": [],
	"description": "",
	"content": " Step 1: Install Nuke Nuke must be installed locally. Go to the official website to download and install. The currently-supported version is Nuke11.1v3. Nuke must be installed to the default file path. \nStep 2: Install Savvy-cli  Ensure node.js is already installed on your local machine. If not, download and install here.\n Download the Savvy-cli installation package. After unzipping, run the following command in the savvy-cli directory: npm link \n In the command line window, typesavvy to confirm that the command works properly.\n  Step 3: Download the sample file  Download and unzip the Sample Files.\n Open the fonts folder and install the fonts inside this folder.\n In the uncompressed folder, run the following command: savvy sample  If an error is returned, it may mean that the Nuke instance you have installed is not a registered version.\n  Step 4: Create a Campaign  On the Savvy Platform, navigate to ‘Studio -\u0026gt; Campaigns’ on the left side menu.\n Click the Create button near the top of page to initiate Campaign creation.\n Fill in the name and summary fields.\n Click Submit. You will be returned to the Campaign list where you can see the newly created Campaign.\n  Step 5: Create Blueprint  On the Savvy Platform, navigate to ‘Studio -\u0026gt; Blueprints’ on the left side menu.\n Click Create.\n Fill in the name of the Blueprint and click Next.\n Navigate to the directory quick_started/batch_simple/assets of the uncompressed sample file in Step 3 and run the following commands: savvy sample savvy bundle \n savvy sample will generate a directory, internally generate video/image etc. for preview. - savvy bundle will be validated and packaged as a Blueprint.  On the Manage/Upload assets screen, click on the upload area or directly drag the Blueprint\u0026rsquo;s archive folder into the upload area. Once the upload completes, click Validate \u0026amp; Next.\n The resulting page should show that the Blueprint was created successfully.\n  Step 6: Use a Blueprint to Generate a Creative  On the Platform, navigate to ‘Studio -\u0026gt; Blueprints’ from the left side menu.\n Locate the Blueprint you just created. In the Operations column, click Generate.\n Fill in the name of Creative. Fill in the Campaign name created in Step 1. If you wish to be notified by email when this Creative is built, fill in the Notify Email field with one or more email addresses.\n The Export Setting fields will be pre-populated with default settings. To add additional outputs, click the Add output drop-down list on the right side. When finished, click Next.\n Fill in text for title, click the small icon on the right side of the input box to display some settings for the typeface. A new image can be uploaded in watermark. When finished, click Next.\n Click Build.\n On the Savvy Platform, navigate to ‘Studio -\u0026gt; Creatives’ on the left side menu. The newly-created Creative should display a Build State with rendering progress. Once the rendering is complete, a View button will appear in the Operations column. Click View to preview the Creative.\n  Step 7: Use Batch to Generate Batch Creatives  On the Savvy Platform, navigate to ‘Studio -\u0026gt; Batches’ on the left side menu.\n Click the Create button near the top of the page.\n Fill in the Campaign name created in Step 1. Then, fill in the name of the Batch you want to create, and fill in Blueprint name created in Step 4. Creative Name Rule can be left as default. Fill in the email address that needs to be notified in the Notify Email field or leave it blank. Click Next.\n Upload the .xlsx file (directory: quick_started/batch_simple/batch.xlsx) from the sample file in the feed.\n In the sample file, all the sub files under the file folder path quick_started/batch_simple/assets need to be selected and packaged into assets.zip. Upload the assets.zip file in the Assets page. Click the Validate \u0026amp; Next button to go to the next step.\n At the moment, all the generated Creatives according to the data are displayed on the page. If you do not need these Creatives, you can delete them. Click Build.\n On the Savvy Platform, navigate to ‘Studio -\u0026gt; Creatives’. You should see new Creatives displaying render progress. Once the rendering is complete, a View button will appear in the Operations column. Click View to preview the Creative.\n  "
},
{
	"uri": "http://localhost/develop/creatives/",
	"title": "Creatives",
	"tags": [],
	"description": "",
	"content": "Introducing APIs for Creatives.\nsequenceDiagram participant ClientApp as Client App participant SavvyAPI as Savvy API participant SavvyTeam as Savvy Team ClientApp-SavvyAPI: POST /creatives/assets?realm_id=#lt;realm_id#gt; SavvyAPI--ClientApp: Return Result ClientApp-SavvyAPI: POST /creatives SavvyAPI--ClientApp: Return Result ClientApp-SavvyAPI: POST /creatives/#lt;id#gt;/build SavvyAPI--ClientApp: Return Result ClientApp-SavvyAPI: GET /creatives/#lt;id#gt;/build_state SavvyAPI--ClientApp: Return Result Note over ClientApp,SavvyTeam: If an error occurs ClientApp-SavvyTeam: POST /supporting_tickets/ SavvyTeam--ClientApp: Return Result loop Reply ticket ClientApp-SavvyTeam: POST /supporting_posts SavvyTeam--ClientApp: Return Result end  List Creatives curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -G \u0026#34;https://www.savvyplatform.com/api-v1/creatives?limit=1\u0026amp;offset=2\u0026#34; List URL Query Params    Name Required Description     limit No Limit the returned records max count   offset No Skip a number of records from the returned result   sort No Sort the return result by a specific field. For example, \u0026ldquo;-id\u0026rdquo; means sort by \u0026ldquo;id\u0026rdquo; field with results in descending order and \u0026ldquo;id\u0026rdquo; would return the results in ascending order   search No A string value for search record\u0026rsquo;s name field   filter No A JSON object for complex filtering of returned records    Return data structure { records: [], offset: 10, total: 100 }     Field Type Description     records Array Returned records   offset int Skipped records count   total int Total records count    Creative record structure    Field Type Description     id int The creative\u0026rsquo;s id   name string The creative\u0026rsquo;s name   realm_id int Realm id   organization_id int Organization id   campaign_id int Campaign id   blueprint_id int Blueprint id   batch_id int Batch id   build_state string Build_state new   fields object Fields   files Array Files   summary string Summary   notify_emails Array\u0026lt;string\u0026gt; A list of emails to receive update notifications   owner_id int Owner id   created_at time The creative\u0026rsquo;s created date.   updated_at time The creative\u0026rsquo;s last updated date.    Create new creative curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test_creative\\\u0026#34;,\\\u0026#34;realm_id\\\u0026#34;:0,\\\u0026#34;summary\\\u0026#34;:\\\u0026#34;a test creative\\\u0026#34;}\u0026#34; \u0026#34;https://www.savvyplatform.com/api-v1/creatives\u0026#34; Posted new data structure    Field Type Required Description     name string Yes The creative\u0026rsquo;s name   realm_id int Yes The realm this creative will belongs to   summary int No Summary for creative   fields Object No Fields   files Array No All files used in fields, it\u0026rsquo;s format is {path:'path/to/asset.png', hash:'hashvalue'}.   outputs Array\u0026lt;Output\u0026gt; Yes Outputs    All relative files used in fields must be defined in files, or an error will occur during render.  Update an existing Creative curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test_creative\\\u0026#34;,\\\u0026#34;realm_id\\\u0026#34;:0,\\\u0026#34;summary\\\u0026#34;:\\\u0026#34;a test creative\\\u0026#34;}\u0026#34; -X PATCH \u0026#34;https://www.savvyplatform.com/api-v1/creatives\u0026#34; Update data structure    Field Type Required Description     name string Yes The creative\u0026rsquo;s name   realm_id int Yes The realm this creative belongs to   summary string No Summary for creative   fields Object No Set each field defined in blueprint, for example: {file: \u0026quot;url/to/asset.png\u0026quot;}   outputs Array\u0026lt;Output\u0026gt; No Outputs    Field Object structure Type: Text    Field Type Required Description     value string No The text value   color object No Set text\u0026rsquo;s color. rgba format, each value\u0026rsquo;s range is 0-1, for example: {r: 0.5, g: 0.3, b: 0.8, a: 0.2}.   background object No Set text background.   background.border object No Set background border, for example: {x:3, y:3}   background.opacity number No Set background opacity. range 0-1.   background.color object No Set background color, using rgba format, each value\u0026rsquo;s range is 0-1, for example: {r: 0.5, g: 0.3, b: 0.8, a: 0.2}.   justify object No Set text justify. For example: {x:3, y:3}   align object No Set text alignment. For example: {horizontal: \u0026quot;center\u0026quot;, vertical: \u0026quot;center\u0026quot;}   font object No Set font. For example: {id: 2, name: \u0026quot;Tahoma Regular\u0026quot;, size: 30, width:40, height:50}    Type: Image or Video    Field Type Required Description     file object No Set image or video\u0026rsquo;s file source, when setting a path to platform\u0026rsquo;s bucket file, hash is required, for example:\n{path: \u0026quot;buckets/unique/hash.jpg\u0026quot;, hash: \u0026quot;1bfbfad8b07da2aa67c97d9f64d30075\u0026quot;}. when setting a path to a remote asset, just set the path field, for exmaple:\n{path: \u0026quot;https://example.com/asset.jpg\u0026quot;}    Type: Color    Field Type Required Description     value object No rgba format, each value\u0026rsquo;s range is 0-1, for example: {r: 0.5, g: 0.3, b: 0.8, a: 0.2}.    Output Object structure    Field Type Required Description     name string Yes The output\u0026rsquo;s name   width int Yes The output\u0026rsquo;s width   height int Yes The output\u0026rsquo;s height   format string Yes The output\u0026rsquo;s format, options include ['mp4', 'avi', 'mov']   max_bit_rate string Yes The output\u0026rsquo;s max bit rate, for example: \u0026lsquo;10Mbps\u0026rsquo;   min_bit_rate string Yes The output\u0026rsquo;s max bit rate, for example: \u0026lsquo;10Mbps\u0026rsquo;   created_at time The font\u0026rsquo;s created date    updated_at time The font\u0026rsquo;s last updated date     Delete an existing Creative curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -X DELETE \u0026#34;https://www.savvyplatform.com/api-v1/creatives/1\u0026#34;"
},
{
	"uri": "http://localhost/dashboard/",
	"title": "Dashboard",
	"tags": [],
	"description": "",
	"content": " Understanding the Dashboard  All the support tickets are listed in the first column, with columns to the right displaying the status reports (See Ticket Status), organizations and last modified time. Colored indicators next to subject names display the current service status. Use the \u0026ldquo;Older\u0026rdquo; or \u0026ldquo;Newer\u0026rdquo; navigation arrows to view historical data.  "
},
{
	"uri": "http://localhost/develop/fonts/",
	"title": "Fonts",
	"tags": [],
	"description": "",
	"content": "Introducing APIs for Fonts.\nList fonts curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -G \u0026#34;https://www.savvyplatform.com/api-v1/fonts?limit=1\u0026amp;offset=2\u0026#34; List URL Query Params    Name Required Description     limit No Limit the returned records max count   offset No Skip a number of records from the returned result   sort No Sort the return result by a specific field. For example, \u0026ldquo;-id\u0026rdquo; means sort by \u0026ldquo;id\u0026rdquo; field with results in descending order and \u0026ldquo;id\u0026rdquo; would return the results in ascending order   search No A string value for search record\u0026rsquo;s name field   filter No A JSON object for complex filtering of returned records    Return data structure { records: [], offset: 10, total: 100 }     Field Type Description     records Array Returned records   offset int Skipped records count   total int Total records count    Font record structure    Field Type Description     id int The font id   name string The font name   family string The font family   style string The font style   files Array The font\u0026rsquo;s files   realm_id int Realm id   organization_id int Organization id   owner_id int Owner id    Install Fonts curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: multipart/form-data\u0026#34; \\ -F \u0026#34;files[0]=@path/to/font0.ttf\u0026#34; \\ -F \u0026#34;files[1]=@path/to/font1.ttf\u0026#34; \\ \u0026#34;https://www.savvyplatform.com/api-v1/fonts/upload?realm_id=\\\u0026lt;realm_id\\\u0026gt;\u0026#34; Only .ttf and .otf font formats are supported. \n"
},
{
	"uri": "http://localhost/studio/",
	"title": "Studio",
	"tags": [],
	"description": "",
	"content": "The Savvy Studio is where all Savvy videos get produced. From within Studio, you can organize your Campaigns and Creatives and upload Blueprints, Fonts and Batches.\n Batches  A Batch is a feed which identifies the different dynamic elements of a Multiplier Blueprint and specifies element values per Creative. This feed allows the User to update content and generate new Creatives without having to update the Creative asset directly. Batches also provide a standard format for describing each Creative. In this format, each aspect of a Creative is called a Creative Attribute. For example, the name of the Creative can be referred to as the Creative Title Attribute, the font of the Creative is the Creative Font Attribute, etc.\n Blueprints  A Blueprint consists of a Nuke file and a JSON file. The Nuke file contains the animation blueprint. The JSON file lists all configurable fields in the blueprint (product images, text, etc).\n Campaign Setup  A Campaign is a single project belonging to one Organization.\n Creatives  A Creative is a single video unit built on the Savvy Platform.\n Fonts  Fonts are used to style rendered text.\n "
},
{
	"uri": "http://localhost/supporting-tickets/",
	"title": "Support Tickets",
	"tags": [],
	"description": "",
	"content": " Support Tickets A Support Ticket is an individual message in the Platform\u0026rsquo;s ticketing system. They can be used to request a new project or ask for help. Customer support is available during regular business hours in your region. After-hours coverage is available for high-priority issues such as system outages.\n\nTo create a Support Ticket:  Navigate to Support Tickets from the side menu. Click Create at the top left. Choose your Organization. Add a custom title or use the preset title by clicking \u0026lsquo;Use a Blueprint\u0026rsquo; from the subject line. Add a description or use the preset description by clicking \u0026lsquo;Use a Blueprint\u0026rsquo; from the subject line. Attach the files if you have (NOTE:The max file size is x GB) Click Submit and make sure you see the pop up box \u0026lsquo;Ticket has been sent successfully\u0026rsquo; appear at the top.  \nTicket status:    Status Descrption     New A new ticket has been created   Pending The request has been received   Finish The request has been completed    \nHow we respond: The Support Team\u0026rsquo;s ability to resolve any issue relies on prompt responses from clients to requests for more information. If we do not receive the necessary troubleshooting information and can\u0026rsquo;t proceed with the investigation, we will contact you until you are able to provide said information.\nThe Support Team cannot answer questions about product pricing or fees. Instead, contact your Savvy Account Manager or Sales Team Representative.\nIf an issue is urgent, please let the Support Team know.\n"
},
{
	"uri": "http://localhost/system/",
	"title": "System",
	"tags": [],
	"description": "",
	"content": "The Savvy Platform\u0026rsquo;s System menu provides tools for the Super Admin to configure all system settings.\n All Users  A User is an individual account created by or invited to the Savvy Platform by the Admin. Each User belongs to one or more Organizations and has a specific Role within each Organization to which it belongs.\nFrom the All Users screen, individual Users may be edited or deleted.\n Organizations  From the Organizations screen, the Admin can configure individual Organizations (create teams, set roles, add more users, etc.)\n System Roles  A Role defines a set of tasks a User assigned to the role is allowed to perform on the Savvy Platform.\n "
},
{
	"uri": "http://localhost/develop/",
	"title": "Developer API",
	"tags": [],
	"description": "",
	"content": " Realms  Each Organization has it\u0026rsquo;s own Realm. Manipulation of Blueprints, Campaigns, Batches, or Creatives usually requires providing a \u0026lsquo;realm_id\u0026rsquo; field. A User can belong to multiple Realms. For each Realm to which a User belongs, it can manipulate all entities belong to that Realm.\n Access Tokens  An Access Token is used to access the Savvy Developer API.\n Blueprints  Introducing APIs for Blueprints.\n Campaigns  Introducing APIs for Campaigns.\n Batches  Introducing APIs for Batches.\n Creatives  Introducing APIs for Creatives.\n Fonts  Introducing APIs for Fonts.\n Support Tickets  Introducing APIs for Support Tickets.\n Support Posts  Introducing APIs for Support Posts.\n Code Examples  We created a sample project in github: https://github.com/savvyplatform/api_examples\n "
},
{
	"uri": "http://localhost/develop/supporting-tickets/",
	"title": "Support Tickets",
	"tags": [],
	"description": "",
	"content": "Introducing APIs for Support Tickets.\nList Support Tickets curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -G \u0026#34;https://www.savvyplatform.com/api-v1/supporting_tickets?limit=1\u0026amp;offset=2\u0026#34; List URL Query Params    Name Required Description     limit No Limit the returned records max count   offset No Skip a number of records from the returned result   sort No Sort the return result by a specific field. For example, \u0026ldquo;-id\u0026rdquo; means sort by \u0026ldquo;id\u0026rdquo; field with results in descending order and \u0026ldquo;id\u0026rdquo; would return the results in ascending order   search No A string value for search record\u0026rsquo;s name field   filter No A JSON object for complex filtering of returned records    Return data structure { records: [], offset: 10, total: 100 }     Field Type Description     records Array Returned records   offset int Skipped records count   total int Total records count    Suporting ticket record structure    Field Type Description     id int The support ticket\u0026rsquo;s id   realm_id int Realm id   organization_id int Organization id   owner_id int Owner id   subject string Subject   state string State   content object Content   attachments Array Attachments   notify_emails Array A list of emails to receive update notifications   last_post_id int Last post id   created_at time Created date   updated_at time Last updated date    Create a new Support Ticket curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test_support_ticket\\\u0026#34;,\\\u0026#34;realm_id\\\u0026#34;:0,\\\u0026#34;summary\\\u0026#34;:\\\u0026#34;a test support ticket\\\u0026#34;}\u0026#34; \u0026#34;https://www.savvyplatform.com/api-v1/supporting_tickets\u0026#34; Posted new data structure    Field Type Required Description     realm_id int Yes The realm this support ticket belongs to   subject string Yes Ticket subject   content object Yes Ticket content   attachments Array Yes Ticket attachments   notify_emails Array Yes A list of emails to receive update notifications    curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test_support_ticket\\\u0026#34;,\\\u0026#34;realm_id\\\u0026#34;:0,\\\u0026#34;summary\\\u0026#34;:\\\u0026#34;a test support ticket\\\u0026#34;}\u0026#34; -X PATCH \u0026#34;https://www.savvyplatform.com/api-v1/supporting_tickets\u0026#34; #### Update data structure Field | Type | Required | Description --------|------|------|------ name | string | Yes |Ticket name realm_id | int | Yes |The realm this support ticket belongs to summary | string | No |Summary for support ticket ### Delete an existing Support Ticket curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -X DELETE \u0026#34;https://www.savvyplatform.com/api-v1/supporting_tickets/1\u0026#34; You can only delete the supporting tickets without any creative used.  --"
},
{
	"uri": "http://localhost/develop/supporting-posts/",
	"title": "Support Posts",
	"tags": [],
	"description": "",
	"content": "Introducing APIs for Support Posts.\nList Supporting Posts curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -G \u0026#34;https://www.savvyplatform.com/api-v1/supporting_posts?limit=1\u0026amp;offset=2\u0026#34; List URL Query Params    Name Required Description     limit No Limit the returned records max count   offset No Skip a number of records from the returned result   sort No Sort the return result by a specific field. For example, \u0026ldquo;-id\u0026rdquo; means sort by \u0026ldquo;id\u0026rdquo; field with results in descending order and \u0026ldquo;id\u0026rdquo; would return the results in ascending order   search No A string value for search record\u0026rsquo;s name field   filter No A JSON object for complex filtering of returned records    Return data structure { records: [], offset: 10, total: 100 }     Field Type Description     records Array Returned records   offset int Skipped records count   total int Total records count    Supporting Post record structure    Field Type Description     id int Post id   realm_id int Realm id   organization_id int Organization id   owner_id int Owner id   ticket_id int Ticket id   replied_id int Replied id   content object Content   format string Format   attachments Array Attachments   created_at time Created date   updated_at time Last updated date    Create new Supporting Post curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test_supporting_post\\\u0026#34;,\\\u0026#34;realm_id\\\u0026#34;:0,\\\u0026#34;content\\\u0026#34;:\\\u0026#34;a test supporting post\\\u0026#34;}\u0026#34; \u0026#34;https://www.savvyplatform.com/api-v1/supporting_posts\u0026#34; Posted new data structure    Field Type Required Description     realm_id int Yes The realm this supporting post belongs to   content string No Content for supporting post    Update an existing Supporting Post curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;test_supporting_post\\\u0026#34;,\\\u0026#34;realm_id\\\u0026#34;:0,\\\u0026#34;summary\\\u0026#34;:\\\u0026#34;a test supporting post\\\u0026#34;}\u0026#34; -X PATCH \u0026#34;https://www.savvyplatform.com/api-v1/suporting_posts\u0026#34; Update data structure    Field Type Required Description     realm_id int Yes The realm this supporting post belongs to   content string No Content for supporting post    curl \\ -H \u0026#34;authorization: Bearer \u0026lt;token\u0026gt;\u0026#34; \\ -X DELETE \u0026#34;https://www.savvyplatform.com/api-v1/supporting_posts/1\u0026#34; You can only delete the suporting posts without any creative used.  --"
},
{
	"uri": "http://localhost/develop/code-examples/",
	"title": "Code Examples",
	"tags": [],
	"description": "",
	"content": "We created a sample project in github: https://github.com/savvyplatform/api_examples\n"
},
{
	"uri": "http://localhost/develop/_list-records/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " List URL Query Params    Name Required Description     limit No Limit the returned records max count   offset No Skip a number of records from the returned result   sort No Sort the return result by a specific field. For example, \u0026ldquo;-id\u0026rdquo; means sort by \u0026ldquo;id\u0026rdquo; field with results in descending order and \u0026ldquo;id\u0026rdquo; would return the results in ascending order   search No A string value for search record\u0026rsquo;s name field   filter No A JSON object for complex filtering of returned records    Return data structure { records: [], offset: 10, total: 100 }     Field Type Description     records Array Returned records   offset int Skipped records count   total int Total records count    "
},
{
	"uri": "http://localhost/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost/",
	"title": "Savvy",
	"tags": [],
	"description": "",
	"content": " Savvy Savvy is a groundbreaking new product designed to re-imagine your existing product photography, ads, and videos into captivating new pieces of social content.\n"
},
{
	"uri": "http://localhost/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]